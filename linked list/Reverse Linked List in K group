LeetCode - Reverse linked list in K group

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) 
    {
        int size=CalculateSize(head); 
        cout<<size;
        return ReverseLinkedList(head,k,size);
        
        
        
    }
    
    int CalculateSize(ListNode* head)
    {
        int size=0;
        ListNode* temp=head;
        while(temp)
        {
            temp=temp->next; 
            size++;
        }
        return size;
    }
    ListNode* ReverseLinkedList(ListNode* head, int k,int currentSize)// helper function
    {
        if(currentSize<k)
            return head;
        ListNode* prev=NULL;
        ListNode* next=NULL;
        ListNode* curr=head;
        int count=0;
        
        while(curr&&count<k) // actually reversing the linked list
        {
            next =curr->next;
            curr->next=prev;
            prev = curr;
            curr = next;
            count++;
        }
        
        if(curr==NULL)
            return prev;
        
        head->next=ReverseLinkedList(next,k,currentSize-k);
        return prev;
    }
};


