/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        
        stack<TreeNode*> S;
        vector<int> res;
        map<TreeNode*,bool> isVisited;
        if(root)
        S.push(root);
        while(!S.empty())
        {
            TreeNode* curr=S.top();
            if(curr->left &&(isVisited.find(curr->left)==isVisited.end()))
            {S.push(curr->left);isVisited[curr->left]=true;continue;}
            
            res.push_back(curr->val);
            S.pop();
            
            if(curr->right &&(isVisited.find(curr->right)==isVisited.end()))
            {S.push(curr->right);isVisited[curr->right]=true;}
            
            
            
        }
        
        
        return res;
    }
};