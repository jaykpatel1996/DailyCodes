https://leetcode.com/problems/binary-search-tree-iterator/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
    
 stack<TreeNode*> s;   
public:
    BSTIterator(TreeNode* root) {
        
        LeftMostInorder(root);
    }
    
    void LeftMostInorder(TreeNode* root)
    {
        if(root)
        {
            s.push(root);
            LeftMostInorder(root->left);
        }
    }
    
    /** @return the next smallest number */
    int next() {
        
        TreeNode* curr = s.top();
        s.pop();
        int res = curr->val;
        if(curr->right)
        {
            LeftMostInorder(curr->right);
        }
        
        return res;
    
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        
        if(!s.empty())
            return true;
        else 
            return false;
        
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */